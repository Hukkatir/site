@page "/signin"
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject dbapiContext context
@using Microsoft.EntityFrameworkCore;
@inject UserService UserService

<div class="signin">
    <h3>Вход</h3>
    @if (!IsLoginSuccessful)
    {
        <div style="margin-bottom: 10px;">
            <h6>Почта:</h6>
            <input type="email" class="form-control" placeholder="Введите почту" @bind-value="Email" />
        </div>

        <div style="margin-bottom: 10px;">
            <h6>Пароль: </h6>
            <input type="password" class="form-control" placeholder="Введите пароль" @bind-value="Password" />
        </div>

        <button class="btn-primary" @onclick="Login">Войти</button>

        <div class="reg">
            <p>Нет аккаунта?  <a href="/signup" target="_blank">Зарегистрироваться</a> </p>
        </div>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div style="margin-top: 10px;" class="alert alert-danger">@ErrorMessage</div>
        }
    }
    else
    {
        <div class="; alert alert-success">Вы успешно авторизировались</div>
    }

</div>


<style>
    .signin{
        cursor: pointer;
        padding: 15px;
        border-radius: 15px;
        background-color: rgba(139, 149, 150, 0.1);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        width: 100%;
        max-width: 350px;
        max-height: 300px;
        margin: auto auto;
        margin-top: 10%;

        display: flex;
        flex-direction: column;
        flex-wrap: nowrap;
        align-items: stretch;
    
    }
    .form-control {
        border-radius: 5px;
        background-color: white;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .btn-primary {
        border-radius: 3px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        display: block;
        margin-left: auto;
        margin-right: auto;
        background: rgba(48, 61, 68, 1);
        color: white;
        width: 100%;
        margin-top: 15px;
        margin-bottom: 10px;

       
    }

    .alert{
        margin: 10px auto;
        text-align:center;
        width: 100%;
        max-width: 350px;
    }

    h3 {
        text-align: center;
    }

</style>

@code {
    string Email { get; set; }
    string Password { get; set; }
    string ErrorMessage { get; set; }
    int UserId;
    bool IsLoginSuccessful;

    private async Task Login()
    {
        ErrorMessage = null;
        if (string.IsNullOrEmpty(Email) || string.IsNullOrEmpty(Password))
        {
            ErrorMessage = "Все поля должны быть заполнены.";
            return;
        }
        List<User> users = new List<User>();
        users = await context.Users.ToListAsync();
        foreach (var user in users)
        {
            if (Email == user.Email && Password == user.UserPassword)
            {
                Console.WriteLine($"Пользователь {user.UserId} авторизовался");
                UserService.UserId = user.UserId;
                NavigationManager.NavigateTo("/person");
                return;
            }
            else if (Email == user.Email && Password != user.UserPassword)
            {
                ErrorMessage = "Неправильный пароль";
                return;
            }
        }
        Console.WriteLine("Пользователь не зарегистрирован");
        ErrorMessage = "Пользователь не зарегистрирован";

    }
}

